{"version":3,"sources":["components/LoadIcon/LoadIcon.js","components/NavBar/NavBar.js","components/ContentView/ContentView.js","components/ContentCard/ContentCard.js","components/ListView/ListView.js","App.js","serviceWorker.js","index.js"],"names":["LoadIcon","react_default","a","createElement","id","Component","NavBar","home","window","location","href","split","Navbar","fixedTop","fluid","Header","Brand","ContentView","state","course","loaded","updateDB","data","document","removeEventListener","_this","detail","setState","loadDB","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","response","JSON","parse","responseText","title","console","log","dispatchEvent","CustomEvent","open","concat","props","send","capitalizeFirstLetter","string","map","word","toUpperCase","slice","toLowerCase","join","addEventListener","classes","length","element","key","teacher","teachers_names","components_NavBar_NavBar","className","Grid","Row","Col","lg","goal","resume","components_LoadIcon_LoadIcon","ContentCard","style","backgroundImage","banner","ListView","db","display","handleContentClick","event","search","target","handleSelectChange","selectedIndex","temp","forEach","categories","push","content","components_ContentCard_ContentCard","htmlFor","defaultValue","onChange","NO_QUERY","App","getQuery","query","parameters","components_ListView_ListView","components_ContentView_ContentView","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAaeA,0LARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,sBAJOC,uBCgBRC,0LAbX,IAAMC,EAAOC,OAAOC,SAASC,KAAKC,MAAM,KAAK,GAC7C,OACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQR,GAAG,SAASS,UAAU,EAAMC,OAAO,GACzCb,EAAAC,EAAAC,cAACS,EAAA,EAAOG,OAAR,KACEd,EAAAC,EAAAC,cAACS,EAAA,EAAOI,MAAR,KACEf,EAAAC,EAAAC,cAAA,KAAGO,KAAMH,GAAT,6BAPSF,wCCoINY,qNAjIbC,MAAQ,CACNC,OAAQ,GACRC,QAAQ,KAmBVC,SAAW,SAAAC,GAETC,SAASC,oBAAoB,WAAYC,EAAKJ,UAC9CI,EAAKP,MAAMC,OAASG,EAAKI,OACzBD,EAAKP,MAAME,QAAS,EACpBK,EAAKE,SAASF,EAAKP,UAGrBU,OAAS,WACP,IAAIC,EAAQ,IAAIC,eAChBD,EAAME,mBAAqB,WACzB,GAAwB,IAApBC,KAAKC,YAAoC,MAAhBD,KAAKE,OAAgB,CAChD,IAAIC,EAAWC,KAAKC,MAAML,KAAKM,cAAchB,KAE7CC,SAASgB,MAAQJ,EAASI,MAE1BC,QAAQC,IAAIN,GAEZZ,SAASmB,cACP,IAAIC,YAAY,WAAY,CAC1BjB,OAAQS,OAKhBN,EAAMe,KACJ,MADF,qCAAAC,OAEuCpB,EAAKqB,MAAM1C,GAFlD,qBAGE,GAEFyB,EAAMkB,UAGRC,sBAAwB,SAAAC,GAKtB,OAJaA,EAAOtC,MAAM,KAAKuC,IAAI,SAAAC,GACjC,OAAOA,EAAK,GAAGC,cAAgBD,EAAKE,MAAM,GAAGC,gBAGnCC,KAAK,0FArDjBhC,SAASgB,MAAQ,kEAIZP,KAAKd,MAAME,SAEdG,SAASiC,iBAAiB,WAAYxB,KAAKX,UAC3CW,KAAKJ,yDAKPL,SAASC,oBAAoB,WAAYQ,KAAKX,2CA6C9C,GAAIW,KAAKd,MAAME,OAAQ,KACbD,EAAWa,KAAKd,MAAhBC,OAERqB,QAAQC,IAAItB,EAAOsC,QAAQC,QAE3B,IAAID,EAAU,kDAEVtC,EAAOsC,QAAQC,OAAS,IAC1BD,EAAUtC,EAAOsC,QAAQP,IAAI,SAAAS,GAC3B,OAAO1D,EAAAC,EAAAC,cAAA,KAAGyD,IAAKD,EAAQvD,IAAKuD,EAAQpB,UAIxC,IAAMsB,EAAU7B,KAAKgB,sBAAsB7B,EAAO2C,gBAMlD,OACE7D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4D,EAAD,MACA9D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAK6D,UAAU,UACb/D,EAAAC,EAAAC,cAAA,MAAI6D,UAAU,gBAAgB7C,EAAOoB,OACrCtC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAMnD,OAAO,GACXb,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,KACEjE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAKC,GAAI,GACPnE,EAAAC,EAAAC,cAAA,MAAI6D,UAAU,mBAAd,aACA/D,EAAAC,EAAAC,cAAA,KAAG6D,UAAU,sBAAsB7C,EAAOkD,OAE5CpE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAKC,GAAI,GACPnE,EAAAC,EAAAC,cAAA,MAAI6D,UAAU,mBAAd,oBACA/D,EAAAC,EAAAC,cAAA,KAAG6D,UAAU,sBAAsB7C,EAAOmD,WAIhDrE,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,KAAG6D,UAAU,WAAWH,IAE1B5D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAK6D,UAAU,WAAWP,OAOpC,OACExD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4D,EAAD,MACA9D,EAAAC,EAAAC,cAACoE,EAAD,cA3HgBlE,cCcXmE,2LAfX,OACEvE,EAAAC,EAAAC,cAAA,KACE6D,UAAU,SACVtD,KAAI,GAAAmC,OAAKrC,OAAOC,SAASC,KAArB,QAAAmC,OAAgCb,KAAKc,MAAM3B,OAAOf,KAEtDH,EAAAC,EAAAC,cAAA,SAAI6B,KAAKc,MAAM3B,OAAOoB,OACtBtC,EAAAC,EAAAC,cAAA,OACEsE,MAAO,CAAEC,gBAAe,OAAA7B,OAASb,KAAKc,MAAM3B,OAAOwD,OAA3B,MACxBX,UAAU,mBAVM3D,cC2HXuE,qNAvHb1D,MAAQ,CACNE,QAAQ,EACRyD,GAAI,GACJC,QAAS,MAmBXzD,SAAW,SAAAC,GAETC,SAASC,oBAAoB,WAAYC,EAAKJ,UAC9CI,EAAKP,MAAM2D,GAAKvD,EAAKI,OACrBD,EAAKP,MAAM4D,QAAUxD,EAAKI,OAC1BD,EAAKP,MAAME,QAAS,EACpBK,EAAKE,SAASF,EAAKP,UAGrBU,OAAS,WACP,IAAIC,EAAQ,IAAIC,eAChBD,EAAME,mBAAqB,WACzB,GAAwB,IAApBC,KAAKC,YAAoC,MAAhBD,KAAKE,OAAgB,CAChD,IAAIC,EAAWC,KAAKC,MAAML,KAAKM,cAAchB,KAE7CC,SAASmB,cACP,IAAIC,YAAY,WAAY,CAC1BjB,OAAQS,OAKhBN,EAAMe,KAAK,MAAO,qCAAqC,GACvDf,EAAMkB,UAGRgC,mBAAqB,SAAAC,GACnBxE,OAAOC,SAASwE,OAAhB,OAAApC,OAAgCmC,EAAME,OAAO9E,OAG/C+E,mBAAqB,SAAAH,GACnB,GAAmC,IAA/BA,EAAME,OAAOE,cACf3D,EAAKE,SAAS,CAAEmD,QAASrD,EAAKP,MAAM2D,SAC/B,CACL,IAAIQ,EAAO,GACX5D,EAAKP,MAAM2D,GAAGS,QAAQ,SAAA3B,GAChBA,EAAQ4B,WAAW,KAAOP,EAAME,OAAOE,eACzCC,EAAKG,KAAK7B,KAGdlC,EAAKE,SAAS,CAAEmD,QAASO,yFAvDtBrD,KAAKd,MAAME,SAEdG,SAASiC,iBAAiB,WAAYxB,KAAKX,UAC3CW,KAAKJ,uDAKPL,SAASgB,MAAQ,iEAIjBhB,SAASC,oBAAoB,WAAYQ,KAAKX,2CAgD9C,IAAMoE,EAAUzD,KAAKd,MAAM4D,QAAQ5B,IAAI,SAAA/B,GAErC,OACElB,EAAAC,EAAAC,cAAA,OAAKyD,IAAKzC,EAAOf,GAAI4D,UAAU,QAC7B/D,EAAAC,EAAAC,cAACuF,EAAD,CAAavE,OAAQA,EAAQyC,IAAKzC,EAAOf,QAO/C,OAFAoC,QAAQC,IAAIT,KAAKd,MAAM2D,IAEnB7C,KAAKd,MAAME,OAEXnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4D,EAAD,MACA9D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACE6D,UAAU,0BACV2B,QAAQ,qBAFV,aAKE1F,EAAAC,EAAAC,cAAA,UACEC,GAAG,oBACHwF,aAAa,QACbC,SAAU7D,KAAKmD,mBACfnB,UAAU,qBAEV/D,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,+BAGJF,EAAAC,EAAAC,cAAA,OAAK6D,UAAU,aACb/D,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aAAaqF,KAMzBxF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4D,EAAD,MACA9D,EAAAC,EAAAC,cAACoE,EAAD,cAjHalE,cCFjByF,EAAW,OA0BFC,6MAvBbC,SAAW,SAAAf,GACT,GAA+B,KAA3BzE,OAAOC,SAASwE,OAAe,OAAOa,EAE1C,IAAIG,EAAQhB,EAAOtE,MAAM,KAAK,GAE1BuF,EAAa,GAIjB,OAFAA,EAAWD,EAAMtF,MAAM,KAAK,IAAMsF,EAAMtF,MAAM,KAAK,GAE5CuF,2EAIP,IAAID,EAAQjE,KAAKgE,SAASxF,OAAOC,SAASwE,QAE1C,OACEhF,EAAAC,EAAAC,cAAA,OAAK6D,UAAU,OACZiC,IAAUH,EAAW7F,EAAAC,EAAAC,cAACgG,EAAD,MAAelG,EAAAC,EAAAC,cAACiG,EAAD,CAAahG,GAAI6F,EAAM7F,aAlBlDC,aCMEgG,QACW,cAA7B7F,OAAOC,SAAS6F,UAEe,UAA7B9F,OAAOC,SAAS6F,UAEhB9F,OAAOC,SAAS6F,SAASC,MACvB,2DCZNC,IAASC,OAAOxG,EAAAC,EAAAC,cAACuG,EAAD,MAASnF,SAASoF,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.336de8c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./LoadIcon.css\";\n\nclass LoadIcon extends Component {\n  render() {\n    return (\n      <div id=\"loading\">\n        <div id=\"load-icon\" />\n      </div>\n    );\n  }\n}\n\nexport default LoadIcon;\n","import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  render() {\n    const home = window.location.href.split(\"?\")[0];\n    return (\n      <Navbar id=\"navbar\" fixedTop={true} fluid={true}>\n        <Navbar.Header>\n          <Navbar.Brand>\n            <a href={home}>Lista de Cursos</a>\n          </Navbar.Brand>\n        </Navbar.Header>\n      </Navbar>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport LoadIcon from \"../LoadIcon/LoadIcon\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport \"./ContentView.css\";\n\nclass ContentView extends Component {\n  state = {\n    course: {},\n    loaded: false\n  };\n\n  componentWillMount() {\n    document.title = \"Carregando curso...\";\n  }\n\n  componentDidMount() {\n    if (!this.state.loaded) {\n      //   console.log(\"load\");\n      document.addEventListener(\"updateDB\", this.updateDB);\n      this.loadDB();\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"updateDB\", this.updateDB);\n  }\n\n  updateDB = data => {\n    // console.log(data.detail);\n    document.removeEventListener(\"updateDB\", this.updateDB);\n    this.state.course = data.detail;\n    this.state.loaded = true;\n    this.setState(this.state);\n  };\n\n  loadDB = () => {\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n      if (this.readyState === 4 && this.status === 200) {\n        let response = JSON.parse(this.responseText).data;\n\n        document.title = response.title;\n\n        console.log(response);\n\n        document.dispatchEvent(\n          new CustomEvent(\"updateDB\", {\n            detail: response\n          })\n        );\n      }\n    };\n    xhttp.open(\n      \"GET\",\n      `https://cefis.com.br/api/v1/event/${this.props.id}?include=classes`,\n      true\n    );\n    xhttp.send();\n  };\n\n  capitalizeFirstLetter = string => {\n    const temp = string.split(\" \").map(word => {\n      return word[0].toUpperCase() + word.slice(1).toLowerCase();\n    });\n\n    return temp.join(\" \");\n  };\n\n  render() {\n    if (this.state.loaded) {\n      const { course } = this.state;\n\n      console.log(course.classes.length);\n\n      var classes = \"Não há aulas disponiveis para este curso.\";\n\n      if (course.classes.length > 0) {\n        classes = course.classes.map(element => {\n          return <p key={element.id}>{element.title}</p>;\n        });\n      }\n\n      const teacher = this.capitalizeFirstLetter(course.teachers_names);\n\n      // const classes = course.classes.map(class => {});\n\n      // if (course.classes.length())\n\n      return (\n        <div>\n          <NavBar />\n          <div>\n            <br />\n            <br />\n            <div className=\"course\">\n              <h3 className=\"course-title\">{course.title}</h3>\n              <br />\n              <Grid fluid={true}>\n                <Row>\n                  <Col lg={4}>\n                    <h4 className=\"course-subtitle\">Objetivo:</h4>\n                    <p className=\"course-description\">{course.goal}</p>\n                  </Col>\n                  <Col lg={8}>\n                    <h4 className=\"course-subtitle\">Descrição:</h4>\n                    <p className=\"course-description\">{course.resume}</p>\n                  </Col>\n                </Row>\n              </Grid>\n              <br />\n\n              <div>\n                <h4>Professor:</h4>\n                <p className=\"teacher\">{teacher}</p>\n              </div>\n              <br />\n              <div>\n                <h4>Aulas:</h4>\n                <div className=\"classes\">{classes}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <NavBar />\n          <LoadIcon />\n        </div>\n      );\n    }\n  }\n}\n\nexport default ContentView;\n","import React, { Component } from \"react\";\nimport \"./ContentCard.css\";\n\nclass ContentCard extends Component {\n  render() {\n    return (\n      <a\n        className=\"banner\"\n        href={`${window.location.href}?id=${this.props.course.id}`}\n      >\n        <p>{this.props.course.title}</p>\n        <div\n          style={{ backgroundImage: `url(${this.props.course.banner})` }}\n          className=\"banner\"\n        />\n      </a>\n    );\n  }\n}\n\nexport default ContentCard;\n","import React, { Component } from \"react\";\nimport LoadIcon from \"../LoadIcon/LoadIcon\";\nimport NavBar from \"../NavBar/NavBar\";\nimport ContentCard from \"../ContentCard/ContentCard\";\nimport \"./ListView.css\";\n\nclass ListView extends Component {\n  state = {\n    loaded: false,\n    db: [],\n    display: []\n  };\n\n  componentDidMount() {\n    if (!this.state.loaded) {\n      //   console.log(\"load\");\n      document.addEventListener(\"updateDB\", this.updateDB);\n      this.loadDB();\n    }\n  }\n\n  componentWillMount() {\n    document.title = \"Lista de Cursos\";\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"updateDB\", this.updateDB);\n  }\n\n  updateDB = data => {\n    // console.log(data.detail);\n    document.removeEventListener(\"updateDB\", this.updateDB);\n    this.state.db = data.detail;\n    this.state.display = data.detail;\n    this.state.loaded = true;\n    this.setState(this.state);\n  };\n\n  loadDB = () => {\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n      if (this.readyState === 4 && this.status === 200) {\n        let response = JSON.parse(this.responseText).data;\n\n        document.dispatchEvent(\n          new CustomEvent(\"updateDB\", {\n            detail: response\n          })\n        );\n      }\n    };\n    xhttp.open(\"GET\", \"https://cefis.com.br/api/v1/event\", true);\n    xhttp.send();\n  };\n\n  handleContentClick = event => {\n    window.location.search = `?id=${event.target.id}`;\n  };\n\n  handleSelectChange = event => {\n    if (event.target.selectedIndex === 0) {\n      this.setState({ display: this.state.db });\n    } else {\n      let temp = [];\n      this.state.db.forEach(element => {\n        if (element.categories[0] === event.target.selectedIndex) {\n          temp.push(element);\n        }\n      });\n      this.setState({ display: temp });\n    }\n  };\n\n  render() {\n    const content = this.state.display.map(course => {\n      // console.log(course.id);\n      return (\n        <div key={course.id} className=\"card\">\n          <ContentCard course={course} key={course.id} />\n        </div>\n      );\n    });\n\n    console.log(this.state.db);\n\n    if (this.state.loaded) {\n      return (\n        <div>\n          <NavBar />\n          <br />\n          <br />\n          <br />\n          <br />\n          <label\n            className=\"category-selector-label\"\n            htmlFor=\"category-selector\"\n          >\n            Categoria:\n            <select\n              id=\"category-selector\"\n              defaultValue=\"Todas\"\n              onChange={this.handleSelectChange}\n              className=\"category-selector\"\n            >\n              <option>Todas</option>\n              <option>Fiscal</option>\n              <option>Contábil</option>\n              <option>Trabalhista</option>\n            </select>\n          </label>\n          <div className=\"container\">\n            <div id=\"list-view\">{content}</div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <NavBar />\n          <LoadIcon />\n        </div>\n      );\n    }\n  }\n}\n\nexport default ListView;\n","import React, { Component } from \"react\";\nimport ContentView from \"./components/ContentView/ContentView\";\nimport ListView from \"./components/ListView/ListView\";\n\nconst NO_QUERY = \"none\";\n\nclass App extends Component {\n  getQuery = search => {\n    if (window.location.search === \"\") return NO_QUERY;\n\n    let query = search.split(\"?\")[1];\n\n    let parameters = {};\n\n    parameters[query.split(\"=\")[0]] = query.split(\"=\")[1];\n\n    return parameters;\n  };\n\n  render() {\n    let query = this.getQuery(window.location.search);\n\n    return (\n      <div className=\"App\">\n        {query === NO_QUERY ? <ListView /> : <ContentView id={query.id} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}